# This GitHub Actions workflow builds platform-specific binaries
# and automatically publishes them to GitHub Releases when a version tag is pushed.

name: Build and Release


# Trigger the workflow only when a tag starting with "v" is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - 'v*' # Triggers only on version tags like v1.0.0

jobs:
  # Build job runs in a matrix (Linux, Windows, macOS)
  build:
    runs-on: ubuntu-latest
    # Run this job in parallel on all specified OS environments    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: Build on ${{ matrix.os }}

    steps:
      # Checkout the repo code    
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js 18 (required for pkg to work with node18 targets)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install project dependencies from package.json
      - name: Install dependencies
        run: npm install

      # Install pkg globally to compile to executables
      - name: Install pkg
        run: npm install -g pkg

      # Ensure dist directory exists (helps avoid errors)
      - name: Ensure dist directory exists
        run: mkdir -p dist

      # Run the build script (defined in package.json as: pkg ...)
      - name: Build binaries
        run: npm run build

      # Upload the built binary as an artifact, uniquely named per OS
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}
          path: dist/

  # Release job runs after all builds finish
  release:
    needs: build
    runs-on: ubuntu-latest
    # Grant permissions to write a release with the default GITHUB_TOKEN    
    permissions:
      contents: write

    steps:
      # Download all artifacts from the previous build jobs    
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      # Flatten all downloaded binaries into a single dist/ folder
      - name: Move all binaries into dist/
        run: |
          mkdir -p dist
          find artifacts -type f -exec cp {} dist/ \;

      # Print out files for debugging and verification
      - name: List files to be uploaded
        run: ls -R dist
        
     # Create a new GitHub Release and upload the binaries
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
